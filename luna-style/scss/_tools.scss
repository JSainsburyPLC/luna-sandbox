@function ln-build-fonts-map($ln-font-keys) {
  $result: ();

  @each $key in $ln-font-keys {
    $result: map-merge(
      $result,
      (
        $key: (
          map-get($ln-font-sizes, $key),
          map-get($ln-line-heights, $key),
          map-get($ln-font-families, $key),
          map-get($ln-font-weights, $key)
        )
      )
    );
  }

  @return $result;
}
@mixin ln-clearfix() {
  &::before {
    clear: both;
    content: ' ';
    display: table;
  }
}
/// Takes a string that maps to a corresponding key in the
/// [`$ln-font-keys`](https://github.com/JSainsburyPLC/luna-style/tree/master/scss/settings#typography)
/// map.
///
/// The mixin returns the generated font-size stack in REM wrapped in the appropriate media queries
/// for that particular size.  If an unknown key is passed in a warning will be logged to the
/// terminal.
/// @group mixins
/// @param {String} $ln-font-size - font key existing in `$ln-font-keys` map.
/// @example scss - Example input
///   .c-some-component {
///     @include ln-font-size('h1');
///   }
///
/// @example css - Example output
///   .c-some-component {
///     font-size: 40px;
///   }
///
///   @media (min-width: 461px) {
///     .c-some-component {
///       font-size: 40px;
///     }
///   }
///
///   @media (min-width: 721px) {
///     .c-some-component {
///       font-size: 70px;
///     }
///   }

@mixin ln-font-size($key) {
  @if map-has-key($ln-font-sizes, $key) {
    @each $breakpoint, $font-size in map-get($ln-font-sizes, $key) {
      @if $breakpoint == 'def' {
        font-size: $font-size;
      }

      @else {
        /* stylelint-disable-next-line max-nesting-depth */
        @include ln-respond-to($breakpoint) {
          font-size: $font-size;
        }
      }
    }
  }

  @else {
    @warn 'Unfortunately, no value could be retrieved for `#{$ln-font-size}`. '
      + 'Please make sure it is defined in `$ln-font-sizes` map.';
  }
}
/// Takes a string that maps to a corresponding key in the
/// [`$ln-font-keys`](https://github.com/JSainsburyPLC/luna/tree/master/variables/Style#typography)
/// map.
///
/// The mixin returns the generated font stack (size, family, weight, line-height) that is mapped
/// to that key. This mixin is primarily used to define headings.  If an unknown key is passed in
/// a warning will be logged to the terminal.
/// @group mixins
/// @param {String} $ln-font - font key existing in `$ln-font-keys` map.
/// @example scss - Example input
///   h1 {
///     @include ln-font('h1');
///   }
///
/// @example css - Example output
///   h1 {
///     line-height: 1.1;
///     font-family: MaryAnn, serif;
///     font-weight: 700;
///     font-size: 40px;
///   }
///
///   @media (min-width: 461px) {
///     h1 {
///       font-size: 40px;
///     }
///   }
///
///   @media (min-width: 721px) {
///     h1 {
///       font-size: 70px;
///     }
///   }
@mixin ln-font($ln-font) {
  @if map-has-key($ln-fonts, $ln-font) {
    font-family: nth(map-get($ln-fonts, $ln-font), 3);
    font-weight: nth(map-get($ln-fonts, $ln-font), 4);
    line-height: nth(map-get($ln-fonts, $ln-font), 2);

    @include ln-font-size($ln-font);
  }

  @else {
    @warn 'Unfortunately, no value could be retrieved from `#{$ln-font}`. '
      + 'Please make sure it is defined in `$ln-fonts` map.';
  }
}

// Uses ln-build-fonts-map function to generate a map with all of the typography maps listed above nested within, used
// fot generating headlines to match up with the Luna styleguide.
$ln-fonts: ln-build-fonts-map($ln-font-keys);
@mixin ln-gutters($size-key, $size-value, $matrix: null, $bp-classes: true) {
  $side: 'left';
  $matrix-class: '';
  $matrix-class-child: '';
  $matrix-class-modifier: '';

  @if $matrix {
    $side: 'bottom';
    $matrix-class-modifier: '--matrix';
    $matrix-class: '.ln-o-grid' + $matrix-class-modifier;
    $matrix-class-child: $matrix-class + ' > ';
  }

  @if ($size-key == 'def') {
    .ln-o-grid#{$matrix-class-modifier} {
      margin-#{$side}: -$size-value;
    }

    #{$matrix-class-child}.ln-o-grid__item {
      padding-#{$side}: $size-value;
    }
  }

  @else {
    #{$matrix-class}.ln-o-grid--gutter-#{$size-key} {
      margin-#{$side}: -$size-value;
    }

    #{$matrix-class}.ln-o-grid--gutter-#{$size-key} > .ln-o-grid__item {
      padding-#{$side}: $size-value;
    }
  }

  @if $use-ln-grid-gutter-breakpoints and $bp-classes {
    @each $bp in $ln-breakpoints {
      /* stylelint-disable max-nesting-depth */
      @for $i from 1 through 2 {
        $bp-key: nth($bp, 1);

        @if $i == 2 {
          $bp-key: 'max-' + nth($bp, 1);
        }

        @include ln-respond-to($bp-key) {
          #{$matrix-class}.ln-o-grid--gutter-#{$size-key}\@#{$bp-key} {
            margin-#{$side}: -$size-value;
          }

          #{$matrix-class}.ln-o-grid--gutter-#{$size-key}\@#{$bp-key} > .ln-o-grid__item {
            padding-#{$side}: $size-value;
          }
        }
      }
      /* stylelint-enable */
    }
  }
}
@mixin ln-input-icon($direction, $icon) {
  padding-#{$direction}: $ln-space-x2 * 2.5; // magic number, ensures text doesn't flow too close to the icon
  background-image: url('data:image/svg+xml;base64,#{$icon}');
  background-position: $direction $ln-space-x2 top 50%;
  background-repeat: no-repeat;
  background-size: auto 35%;
}
/*
Media query breakpoints.
You can choose how many, the namespace and breakpoint value.
Example width class with default values: Note the `@`symbol prepends
the namespace.

`u-1/2@sm-up u-2/5@lg-up`

/*
1. Takes 3 arguments:
   - The property (Width OR push OR pull),
   - The fractions list that corresponds to the property,
   - The breakpoint (can be an item in the `$ln-breakpoints` list or null).
2. Loop through all of the fractions
3. If the property within the current fraction has been set feature-toggled
4. If a breakpoint was passed into the mixin...
5. Generate a class name based on:
   - The namespace in the current fraction +
   - An escaped @ symbol as a responsive suffix +
   - The namespace from the current breakpoint item.
6. Generate the property and the value, which is the fraction e.g. 1/3
   converted into a percentage.
7. A breakpoint was not passed into the mixin...
8. Generate the same as above but without any responsive suffixes.
 */
@mixin ln-set-fractions($ln-property, $ln-fractions, $ln-breakpoint) {
  // [1]
  @each $ln-fraction in $ln-fractions { // [2]
    @if nth($ln-fraction, 3) { // [3]
      /* stylelint-disable max-nesting-depth */
      @if $ln-breakpoint { // [4]
        .#{nth($ln-fraction, 1)}\@#{nth($ln-breakpoint, 1)} { // [5]
          #{$ln-property}: nth($ln-fraction, 2) * 100%; // [6]
        }
      }

      @else {
        // [7]
        .#{nth($ln-fraction, 1)} { // [8]
          #{$ln-property}: nth($ln-fraction, 2) * 100%;
        }
      }
      /* stylelint-enable */
    }
  }
}

/*
1. Takes 2 arguments:
   - The fractions list that corresponds to the property (Width/Push/pull),
   - An optional namespace that will form a segment of the eventual class name.
2. Call the `set-fractions mixin` passing in:
   - The property,
   - The fractions list,
3. Check if any breakpoints are defined.
4. Loop through the breakpoints.
5. Generate a mobile first media query taking with width value from the
   current breakpoint's list (2nd value) and add `1` to the value.
2. Call the `set-fractions mixin` passing in:
   - The property,
   - The fractions list,
   - the current breakpoint
 */
@mixin ln-make-offsets($ln-property, $ln-fractions) { // [1]
  @include ln-set-fractions($ln-property, $ln-fractions, null); // [2]

  @if $ln-breakpoints { // [3]
    @each $ln-breakpoint in $ln-breakpoints { // [4]
      @media (min-width: nth($ln-breakpoint, 2)) { // [5]
        @include ln-set-fractions($ln-property, $ln-fractions, $ln-breakpoint);
      }
    }
  }
}
@mixin ln-list-spacing($class, $side) {
  $modifier: '--spaced';

  @if $class == 'matrix-list' {
    $modifier: '';
  }
  $compound-class: 'ln-o-#{$class}#{$modifier}';

  @each $key, $breakpoints in $ln-list-spacing {
    $compound-class: 'ln-o-#{$class}#{$modifier}-#{$key}';

    @if $key == 'def' {
      $compound-class: 'ln-o-#{$class}#{$modifier}';
    }

    @each $bp, $value in $breakpoints {
      /* stylelint-disable max-nesting-depth */
      @if $bp == 'def' {
        .#{$compound-class} {
          margin-#{$side}: -$value;
        }

        .#{$compound-class} > .ln-o-#{$class}__item {
          padding-#{$side}: $value;
        }
      }

      @else {
        @include ln-respond-to($bp) {
          .#{$compound-class} {
            margin-#{$side}: -$value;
          }

          .#{$compound-class} > .ln-o-#{$class}__item {
            padding-#{$side}: $value;
          }
        }
      }
      /* stylelint-enable max-nesting-depth */
    }
  }
}
/// Generates a media query based on the key passed in the first argument. An optional second
/// argument takes a Sass map with corresponding keys; this defaults to
/// [`$ln-breakpoints`](https://github.com/JSainsburyPLC/luna-style/tree/master/scss/settings#globals).
///
/// The first argument can be used to generate a `min-width` or `max-width` media query by
/// prepending the key with either `min-` or `max-`.  If just the key is passed for example `md`
/// the media query will default to `min-width`
/// @group mixins
/// @param {Breakpoint} $ln-breakpoint - should match the breakpoints specified in $ln-breakpoints or the provided map.
///   - Can accept prefixes for `min-` and `max-` for min/max width media queries, default is min-width.
/// @param {Map} $ln-breakpoints-map [$ln-breakpoints] - Map containing the $ln-breakpoint breakpoint definition.
/// @example scss - Example input
///   @include ln-respond-to('max-sm') {...}
///   @include ln-respond-to('md') {...}
///   @include ln-respond-to('nav', $component-breakpoints) {...}
@mixin ln-respond-to($ln-breakpoint, $ln-breakpoints-map: $ln-breakpoints) {
  @if map-has-key($ln-breakpoints-map, $ln-breakpoint) {
    @media (min-width: #{map-get($ln-breakpoints-map, $ln-breakpoint)}) {
      @content;
    }
  }

  @else {
    @if (str-index($ln-breakpoint, 'max-')) {
      $ln-bp: ln-str-replace($ln-breakpoint, 'max-', '');

      @if map-has-key($ln-breakpoints-map, $ln-bp) {
        /* stylelint-disable-next-line max-nesting-depth */
        @media (max-width: #{(map-get($ln-breakpoints-map, $ln-bp)-1)}) {
          @content;
        }
      }
    }

    @else if (str-index($ln-breakpoint, 'min-')) {
      $ln-bp: ln-str-replace($ln-breakpoint, 'min-', '');

      @if map-has-key($ln-breakpoints-map, $ln-bp) {
        /* stylelint-disable-next-line max-nesting-depth */
        @media (min-width: #{map-get($ln-breakpoints-map, $ln-bp)}) {
          @content;
        }
      }
    }

    @else {
      @warn 'Unfortunately, no value could be retrieved from `#{$ln-breakpoint}`. '
        + 'Please make sure it is defined in the breakpoints map.';
    }
  }
}
/// @deprecated
@mixin ln-spacing {
  @each $key, $value in $ln-spacing-percentages {
    @if $key == 'def' {
      font-size: $value;
    }

    @else {
      @if map-has-key($ln-breakpoints, $key) {
        /* stylelint-disable-next-line max-nesting-depth */
        @include ln-respond-to($key) {
          font-size: $value;
        }
      }

      @else {
        @warn 'No "#{$key}" breakpoint found';
      }
    }
  }
}

@mixin ln-set-spacing-rule($type, $size: 'def', $important: false, $neg: false) {
  $important-str: '';
  $spacing: map-get($ln-scaled-space, $size);

  @if ($important) {
    $important-str: '!important';
  }

  @each $breakpoint, $value in $spacing {
    @if ($neg) { $value: -$value; }

    @if ($breakpoint == 'def') {
      #{$type}: $value #{$important-str};
    }

    @else {
      @include ln-respond-to($breakpoint) {
        #{$type}: $value #{$important-str};
      }
    }
  }
}

@mixin ln-set-spacing($size: 'def', $direction: 'all', $type: 'padding', $important: false, $neg: false) {
  $direction-list: '';
  $separator: '-';
  $important-str: '';
  $spacing: map-get($ln-scaled-space, $size);

  @if ($important) {
    $important-str: '!important';
  }

  @if ($direction == 'ends') {
    $direction-list: 'top', 'bottom';
  }

  @else if ($direction == 'sides') {
    $direction-list: 'left', 'right';
  }

  @else if ($direction == null or $direction == 'all') {
    $direction-list: '';
    $separator: '';
  }

  @else {
    $direction-list: $direction;
  }

  @each $breakpoint, $value in $spacing {
    @if ($neg) { $value: -$value; }

    @if ($breakpoint == 'def') {
      @each $direction-string in $direction-list {
        #{$type}#{$separator}#{$direction-string}: #{$value} #{$important-str};
      }
    }

    @else {
      @include ln-respond-to($breakpoint) {
        // stylelint-disable-next-line max-nesting-depth
        @each $direction-string in $direction-list {
          #{$type}#{$separator}#{$direction-string}: #{$value} #{$important-str};
        }
      }
    }
  }
}

@mixin ln-soft($size: 'def', $important: false) {
  @include ln-set-spacing($size, 'all', 'padding', $important);
}

@mixin ln-soft-top($size: 'def', $important: false) {
  @include ln-set-spacing($size, 'top', 'padding', $important);
}

@mixin ln-soft-right($size: 'def', $important: false) {
  @include ln-set-spacing($size, 'right', 'padding', $important);
}

@mixin ln-soft-bottom($size: 'def', $important: false) {
  @include ln-set-spacing($size, 'bottom', 'padding', $important);
}

@mixin ln-soft-left($size: 'def', $important: false) {
  @include ln-set-spacing($size, 'left', 'padding', $important);
}

@mixin ln-soft-ends($size: 'def', $important: false) {
  @include ln-set-spacing($size, 'ends', 'padding', $important);
}

@mixin ln-soft-sides($size: 'def', $important: false) {
  @include ln-set-spacing($size, 'sides', 'padding', $important);
}

@mixin ln-push($size: 'def', $important: false, $neg: false) {
  @include ln-set-spacing($size, 'all', 'margin', $important, $neg);
}

@mixin ln-push-top($size: 'def', $important: false, $neg: false) {
  @include ln-set-spacing($size, 'top', 'margin', $important, $neg);
}

@mixin ln-push-right($size: 'def', $important: false, $neg: false) {
  @include ln-set-spacing($size, 'right', 'margin', $important, $neg);
}

@mixin ln-push-bottom($size: 'def', $important: false, $neg: false) {
  @include ln-set-spacing($size, 'bottom', 'margin', $important, $neg);
}

@mixin ln-push-left($size: 'def', $important: false, $neg: false) {
  @include ln-set-spacing($size, 'left', 'margin', $important, $neg);
}

@mixin ln-push-ends($size: 'def', $important: false, $neg: false) {
  @include ln-set-spacing($size, 'ends', 'margin', $important, $neg);
}

@mixin ln-push-sides($size: 'def', $important: false, $neg: false) {
  @include ln-set-spacing($size, 'sides', 'margin', $important, $neg);
}
// This array will define the amount of levels for the strength meter.
$ln-strength-meter-colors: ($ln-color-red, $ln-color-orange, $ln-color-yellow, $ln-color-green);

// Color for the borders in between strength levels.
$gap-color: transparent;

// Nesting depth > 1 is necessary in functions
/* stylelint-disable max-nesting-depth */

@function ln-get-strength-meter-colours($meter-level) {
  $total-colors: length($ln-strength-meter-colors);
  $percentage: 100 / $total-colors;
  $color-range: ();

  // For each cycle, it will add 4 values into the color-range array.
  // First 2 correspond to a range of either the colour or default colour.
  // Last 2 will be the gaps between colours.
  @for $i from 0 to $total-colors {
    $current-color: '';

    // Will pick either color or else default color
    @if ($i < $meter-level) {
      $current-color: nth($ln-strength-meter-colors, $i+1);
    }

    @else {
      $current-color: $ln-color-password-meter-default;
    }

    // 1 of 4 color or default
    $color-range: append($color-range, $current-color ($i * $percentage) * 1%, comma);

    // 2 of 4 color or default
    @if $i < $total-colors - 1 {
      $color-range: append($color-range, $current-color ((($i+1) * $percentage) - 0.25) * 1%, comma);
    }

    @else {
      $color-range: append($color-range, $current-color (($i+1) * $percentage) * 1%, comma);
    }

    // 3 and 4 of 4. Transparent gaps
    @if $i < $total-colors - 1 {
      $color-range: append($color-range, $gap-color ((($i+1) * $percentage) - 0.25) * 1%, comma);
      $color-range: append($color-range, $gap-color (($i+1) * $percentage) * 1%, comma);
    }
  }

  @return ($color-range);
}

/* stylelint-enable */
/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @group mixins
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace - New value
/// @return {String} - Updated string
@function ln-str-replace($string, $search, $replace) {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + ln-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}
@mixin ln-text-input-box-shadow($colour) {
  box-shadow: inset 0 0 0 1px $colour;
}

@mixin ln-text-input-border-variant($colour) {
  border-color: $colour;

  &:hover,
  &:focus {
    @include ln-text-input-box-shadow($colour);
  }
}

@mixin ln-text-input {
  background-color: $ln-color-input-background;

  // White linear-gradient to override iOS default gradient
  background-image: linear-gradient($ln-color-input-background, $ln-color-input-background);
  border: 1px solid $ln-color-input-border;
  border-radius: $ln-border-radius;
  min-height: $ln-size-def;
  padding: 0 $ln-space-x2;
  width: 100%;

  &:not([disabled]) {
    &:hover {
      @include ln-text-input-box-shadow($ln-color-input-border);
    }

    &:focus {
      @include ln-text-input-box-shadow($ln-color-input-border-focus);

      border-color: $ln-color-input-border-focus;
    }
  }
}
/// Visually hides a component (visually meaning that it's still accessible to screen reader technology).
/// @group mixins
/// @param {Bool} $important - will add `!important` to all the generated CSS properties.  This is rarely required, however it can bypass specificity issues that you might incur.
/// @param {Bool} $undo - will reverse the function and render the component visible.
/// @link https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe `nowrap` prevents text from being condensed
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/clip `clip` is deprecated but works everywhere
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path `clip-path` is the future-proof version, but not very well supported yet.
/// @example scss - Example input
///   .my-component {
///     @include ln-visually-hidden;
///
///     &.is-open {
///       @include ln-visually-hidden(false, true);
///     }
///   }
@mixin ln-visually-hidden($important: false, $undo: false) {
  $important-str: '';

  @if ($important) {
    $important-str: '!important';
  }

  @if ($undo) {
    clip: auto #{$important-str};
    clip-path: none #{$important-str};
    height: auto #{$important-str};
    overflow: visible #{$important-str};
    position: static #{$important-str};
    white-space: normal #{$important-str};
    width: auto #{$important-str};
  }

  @else {
    border: 0 #{$important-str};
    clip: rect(1px, 1px, 1px, 1px) #{$important-str};
    clip-path: inset(50%) #{$important-str}; // 50% is shorthand for clipping 100% of the x and y axis
    height: 1px #{$important-str};
    overflow: hidden #{$important-str};
    padding: 0 #{$important-str};
    position: absolute #{$important-str};
    white-space: nowrap #{$important-str};
    width: 1px #{$important-str};
  }
}
