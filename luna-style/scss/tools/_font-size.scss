/// Takes a string that maps to a corresponding key in the
/// [`$ln-font-keys`](https://github.com/JSainsburyPLC/luna-style/tree/master/scss/settings#typography)
/// map.
///
/// The mixin returns the generated font-size stack in REM wrapped in the appropriate media queries
/// for that particular size.  If an unknown key is passed in a warning will be logged to the
/// terminal.
/// @group mixins
/// @param {String} $ln-font-size - font key existing in `$ln-font-keys` map.
/// @example scss - Example input
///   .c-some-component {
///     @include ln-font-size('h1');
///   }
///
/// @example css - Example output
///   .c-some-component {
///     font-size: 40px;
///   }
///
///   @media (min-width: 461px) {
///     .c-some-component {
///       font-size: 40px;
///     }
///   }
///
///   @media (min-width: 721px) {
///     .c-some-component {
///       font-size: 70px;
///     }
///   }

@mixin ln-font-size($key) {
  @if map-has-key($ln-font-sizes, $key) {
    @each $breakpoint, $font-size in map-get($ln-font-sizes, $key) {
      @if $breakpoint == 'def' {
        font-size: $font-size;
      }

      @else {
        /* stylelint-disable-next-line max-nesting-depth */
        @include ln-respond-to($breakpoint) {
          font-size: $font-size;
        }
      }
    }
  }

  @else {
    @warn 'Unfortunately, no value could be retrieved for `#{$ln-font-size}`. '
      + 'Please make sure it is defined in `$ln-font-sizes` map.';
  }
}
