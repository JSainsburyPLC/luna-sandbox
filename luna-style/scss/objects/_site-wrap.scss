@if ($use-ln-site-wrap) {
  @warn '\'site-wrap\' is deprecated, please use \'container\' instead';

  .ln-o-site-wrap {
    margin: 0 auto;
    max-width: $ln-site-wrap-max-width;
  }

  /*
  Adds padding, required if there's to be objects or components such as the
  grid system that contains negative margin equal to `$half-spacing-unit`.
  */
  @each $key, $breakpoints in $ln-site-wrap-padding-variants {
    $suffix: '';

    @if ($key != 'def') { $suffix: '-#{$key}'; }

    .ln-o-site-wrap.ln-o-site-wrap--padding#{$suffix} {
      /* stylelint-disable max-nesting-depth */
      @each $key, $value in $breakpoints {
        @if ($key == 'def') {
          max-width: ($ln-site-wrap-max-width + $value * 2);
          padding-left: $value;
          padding-right: $value;
        }

        @else {
          @include ln-respond-to('min-#{$key}') {
            max-width: ($ln-site-wrap-max-width + $value * 2);
            padding-left: $value;
            padding-right: $value;
          }
        }
      }
      /* stylelint-enable max-nesting-depth */
    }
  }

  // Large
  .ln-o-site-wrap--large {
    max-width: $ln-site-wrap-large-max-width;

    @each $key, $breakpoints in $ln-site-wrap-padding-variants {
      $suffix: '';

      @if ($key != 'def') { $suffix: '-#{$key}'; }

      &.ln-o-site-wrap--padding#{$suffix} {
        /* stylelint-disable max-nesting-depth */
        @each $key, $value in $breakpoints {
          @if ($key == 'def') {
            max-width: ($ln-site-wrap-large-max-width + $value * 2);
            padding-left: $value;
            padding-right: $value;
          }

          @else {
            @include ln-respond-to('min-#{$key}') {
              max-width: ($ln-site-wrap-large-max-width + $value * 2);
              padding-left: $value;
              padding-right: $value;
            }
          }
        }
        /* stylelint-enable max-nesting-depth */
      }
    }
  }

  /* Squash */
  .ln-o-site-wrap--squash {
    max-width: $ln-site-wrap-squeeze-max-width;

    @each $key, $breakpoints in $ln-site-wrap-padding-variants {
      $suffix: '';

      @if ($key != 'def') { $suffix: '-#{$key}'; }

      &.ln-o-site-wrap--padding#{$suffix} {
        /* stylelint-disable max-nesting-depth */
        @each $key, $value in $breakpoints {
          @if ($key == 'def') {
            max-width: ($ln-site-wrap-squeeze-max-width + $value * 2);
            padding-left: $value;
            padding-right: $value;
          }

          @else {
            @include ln-respond-to('min-#{$key}') {
              max-width: ($ln-site-wrap-squeeze-max-width + $value * 2);
              padding-left: $value;
              padding-right: $value;
            }
          }
        }
        /* stylelint-enable max-nesting-depth */
      }
    }
  }
}
