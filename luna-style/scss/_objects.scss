@if $use-ln-article {
  .ln-o-article {
    /* Need to nest more than 1 level here to format loop */
    /* stylelint-disable max-nesting-depth  */
    @each $key, $values in $ln-font-sizes {
      #{$key} {
        @each $key, $value in $values {
          @if $key == 'def' {
            margin-bottom: ($value / 3);
          }

          @else {
            @include ln-respond-to($key) {
              margin-bottom: ($value / 3);
            }
          }
        }
      }
    }
    /* stylelint-enable */
  }
}
@if $use-ln-bare-link {
  .ln-o-bare-link {
    color: inherit;
    font-family: inherit;
    font-weight: inherit;
    text-decoration: inherit;

    &:hover,
    &:focus {
      color: inherit;
      text-decoration: underline;
    }
  }
}
@if $use-ln-clearfix {
  /*
  The clearfix object allows you to easily restore the height of a wrapping
  element when its children are floated. It should only be used when floating
  is the only simple option available. Where possible, use inline-block.
  */

  .ln-o-clearfix::after {
    clear: both;
    content: '';
    display: table;
  }
}
/* stylelint-disable max-nesting-depth */
@if $use-ln-container {
  /*
  Containers can be used to constrain the maximum width of content
  and/or center it with optional padding applied.

  An example use-case is to provide a site wrap for web pages.
  */

  .ln-o-container {
    margin: 0 auto;
  }

  .ln-o-container--free {
    margin: 0;
  }

  @each $key, $size in $ln-container-sizes {
    $size-modifier: '';

    @if ($key != 'def') {
      $size-modifier: '--#{$key}';
    }

    $width-rem: ($size / $ln-browser-font-size-default) * 1rem;

    .ln-o-container#{$size-modifier} {
      max-width: $width-rem;
    }

    @each $key, $breakpoints in $ln-container-soft-variants {
      $suffix: '';

      @if ($key != 'def') {
        $suffix: '-#{$key}';
      }

      .ln-o-container#{$size-modifier}.ln-o-container--soft#{$suffix} {
        @each $key, $value in $breakpoints {
          @if ($key == 'def') {
            max-width: ($width-rem + $value * 2);
            padding-left: $value;
            padding-right: $value;
          }

          @else {
            @include ln-respond-to($key) {
              max-width: ($width-rem + $value * 2);
              padding-left: $value;
              padding-right: $value;
            }
          }
        }
      }
    }
  }
}

.ln-o-container.ln-o-container--fluid {
  max-width: none;
  width: 100%;
}
@if $use-ln-flag {
  /*
  The flag object allows you to display textual content.
  and image like content side by side, with the addition
  of being able to vertically align them, the default being
  middle.
  */

  .ln-o-flag:not([class^='ln-o-flag\@']) {
    align-items: center;
    display: flex;
    width: 100%;
  }

  .ln-o-flag__component--top,
  .ln-o-flag__body--top {
    align-self: flex-start;
  }

  .ln-o-flag__component--bottom,
  .ln-o-flag__body--bottom {
    align-self: flex-end;
  }

  .ln-o-flag__component {
    // https://github.com/philipwalton/flexbugs#flexbug-1
    flex-basis: auto;
    flex-grow: 0;
    flex-shrink: 1;
  }

  .ln-o-flag__body {
    flex-basis: 0;
    flex-grow: 1;
    flex-shrink: 0;
  }

  :not([class^='ln-o-flag\@']) > .ln-o-flag__component--nowrap {
    white-space: nowrap;
  }

  .ln-o-flag__component > img {
    display: block;
    max-width: none;
  }

  @each $key, $value in $ln-breakpoints {
    .ln-o-flag\@#{$key} {
      @include ln-respond-to('max-#{$key}') {
        margin-bottom: -$ln-space;
        margin-top: -$ln-space;
      }

      @include ln-respond-to($key) {
        display: flex;
      }
    }

    .ln-o-flag\@#{$key} .ln-o-flag__component--nowrap {
      @include ln-respond-to($key) {
        white-space: nowrap;
      }
    }

    .ln-o-flag\@#{$key} .ln-o-flag__component,
    .ln-o-flag\@#{$key} .ln-o-flag__body {
      @include ln-respond-to('max-#{$key}') {
        padding-bottom: $ln-space;
        padding-top: $ln-space;
      }
    }
  }
}
@if $use-ln-flyout {
  .ln-o-flyout {
    overflow: hidden;
    position: relative;
  }

  .ln-o-flyout__content {
    @include ln-visually-hidden;

    left: 0;
    top: 100%;
    z-index: 1;
  }

  .ln-o-flyout__content--right {
    left: auto;
    right: 0;
  }

  .ln-o-flyout__content--top {
    bottom: 100%;
    top: auto;
  }

  .ln-o-flyout:hover,
  .ln-o-flyout.is-open {
    overflow: visible;
  }

  .ln-o-flyout:hover > .ln-o-flyout__content,
  .ln-o-flyout.is-open > .ln-o-flyout__content {
    /**
     * Undo the properties set from `ln-visually-hidden` mixin.
     **/

    @include ln-visually-hidden(false, true);

    position: absolute;
  }
}
@if $use-ln-grid {
  // #Grid

  /*
  1. Ensure grid spans full width of parent.
  2. Reset any margins and paddings.
  3. Set a zero font-size to remove spacing on the `o-grid__item` children
     caused by them having their display set to `inline-block`.
  4. Remove any possible list styling.
  */
  .ln-o-grid {
    list-style: none; // [5]
    margin: 0; // [2]
    min-width: 100%; // [1]
    padding: 0; // [2]

    @if $use-ln-grid-zero-font-size-fix {
      font-size: 0; // [4]
    }
  }

  // Build grid gutters.
  @each $key, $value in $ln-grid-gutter-sizes {
    /* stylelint-disable max-nesting-depth */
    @if type-of($value) == 'map' {
      @each $bp, $size in $value {
        @if $bp == 'def' {
          @include ln-gutters($key, $size, null, false);
        }

        @else {
          @include ln-respond-to($bp) {
            @include ln-gutters($key, $size, null, false);
          }
        }
      }
    }

    @else {
      @include ln-gutters($key, $value);
    }

    @if $use-ln-grid-matrix {
      @if type-of($value) == 'map' {
        @each $bp, $size in $value {
          @if $bp == 'def' {
            @include ln-gutters($key, $size, 'matrix', false);
          }

          @else {
            @include ln-respond-to($bp) {
              @include ln-gutters($key, $size, 'matrix', false);
            }
          }
        }
      }

      @else {
        @include ln-gutters($key, $value, 'matrix');
      }
    }
    /* stylelint-enable max-nesting-depth */
  }

  /*
  1. Give grid items equal heights using flexbox.
    Works for IE10+  IE9 will fallback to the default grid.
  2. Fix for IE10 which requires children of flexbox-items to have a
    maximum width of 100%.
  */
  @if $use-ln-grid-equal-height { /* 1 */
    .ln-o-grid--equal-height,
    .ln-o-grid--equal-height > .ln-o-grid__item,
    .ln-o-grid--equal-height--centered-content > .ln-o-grid__item {
      display: flex;

      > * { /** [2] */
        width: 100%;
      }
    }

    /*
    Allow equal height items to wrap, just as standard grid items do, when
    a combined width of the grid-items is > 100%.
    */
    .ln-o-grid--equal-height {
      flex-wrap: wrap;
    }

    // .ln-u-text-align-center is the method for centering grid items, this makes it work
    // also for equal height grids, which cannot be text-aligned due to the use of flexbox.
    .ln-o-grid--equal-height.ln-u-text-align-center {
      justify-content: center;
    }

    // Vertically center any content nested inside of equal-height grid items.
    .ln-o-grid--equal-height--centered-content > .ln-o-grid__item > * {
      align-items: center;
      justify-content: center;
    }
  }

  // Vertically align grid-items to the center
  @if $use-ln-grid-center {
    .ln-o-grid--center > .ln-o-grid__item {
      vertical-align: middle;
    }
  }

  // Vertically align grid-items to the bottom
  @if $use-ln-grid-bottom {
    .ln-o-grid--bottom > .ln-o-grid__item {
      vertical-align: bottom;
    }
  }

  // Reverse grid items on the horizontal axis.
  @if $use-ln-grid-reverse {
    .ln-o-grid--reverse {
      direction: rtl;
      text-align: left;

      > .ln-o-grid__item {
        direction: ltr;
        text-align: left;
      }
    }
  }

  /*
  1. Set display to relative to allow the push/pull classes to work
     which are using left/right positioning values.
  2. Set display to inline-block.  Rather than floating block elements that
     you see on many other grid systems, inline-blocks have a number of
     benefits such as:
     - No clearfixing issues.
     - Rows will tile nicely even if grid items are all different heights.
     - You can vertically align grid items that are different heights.
     - You can horizontally align grid items, when total width is <100%
       using text-align on the parent 'grid' component.
     - You can reverse the order of the grid items by using `grid--reverse`
        which changes the direction property from right to left.
  3. Set default width of 100%.
  4. Prevent item from collapsing when empty.
  5. When grid items are differing heights, align them to the top.
  6. Prevent grid-items from inhering text-align properties set
     One parent or ancestor nodes.
  7. Inject the base font-size.  The grid items cannot inherit font-size
     As the font-size on the parent `o-grid` component is set to zero to
     overcome whitespace issues when using inline-block.
  */
  .ln-o-grid__item {
    display: inline-block; // [2]
    min-height: 1px; // [4]
    position: relative; // [1]
    text-align: left; // [7]
    vertical-align: top; // [6]
    width: 100%; // [3]
  }
}

@if $use-ln-grid-zero-font-size-fix {
  .ln-o-grid__item {
    $font-size-grid: map-get($ln-font-sizes, $ln-font-size-base);

    @each $key, $value in $font-size-grid {
      @if $key == 'def' {
        font-size: $value;
      }

      @else {
        /* stylelint-disable-next-line max-nesting-depth */
        @include ln-respond-to($key) {
          font-size: $value;
        }
      }
    }
  }
}
// Applied to the Body, when modals, navigation popover are open to prevent user scrolling.
.has-overlay {
  overflow: hidden;
}
.ln-o-page {
  display: flex;
  flex-direction: column;
  height: 100vh;
  overflow: auto;
}

.ln-o-page__body {
  flex-basis: auto;
  flex-grow: 1;
  flex-shrink: 0;
}

.ln-o-page__header,
.ln-o-page__footer {
  flex-basis: auto;
  flex-grow: 0;
  flex-shrink: 0;
}
.ln-o-section {
  @include ln-soft-bottom('lg');
}
@if ($use-ln-site-wrap) {
  @warn '\'site-wrap\' is deprecated, please use \'container\' instead';

  .ln-o-site-wrap {
    margin: 0 auto;
    max-width: $ln-site-wrap-max-width;
  }

  /*
  Adds padding, required if there's to be objects or components such as the
  grid system that contains negative margin equal to `$half-spacing-unit`.
  */
  @each $key, $breakpoints in $ln-site-wrap-padding-variants {
    $suffix: '';

    @if ($key != 'def') { $suffix: '-#{$key}'; }

    .ln-o-site-wrap.ln-o-site-wrap--padding#{$suffix} {
      /* stylelint-disable max-nesting-depth */
      @each $key, $value in $breakpoints {
        @if ($key == 'def') {
          max-width: ($ln-site-wrap-max-width + $value * 2);
          padding-left: $value;
          padding-right: $value;
        }

        @else {
          @include ln-respond-to('min-#{$key}') {
            max-width: ($ln-site-wrap-max-width + $value * 2);
            padding-left: $value;
            padding-right: $value;
          }
        }
      }
      /* stylelint-enable max-nesting-depth */
    }
  }

  // Large
  .ln-o-site-wrap--large {
    max-width: $ln-site-wrap-large-max-width;

    @each $key, $breakpoints in $ln-site-wrap-padding-variants {
      $suffix: '';

      @if ($key != 'def') { $suffix: '-#{$key}'; }

      &.ln-o-site-wrap--padding#{$suffix} {
        /* stylelint-disable max-nesting-depth */
        @each $key, $value in $breakpoints {
          @if ($key == 'def') {
            max-width: ($ln-site-wrap-large-max-width + $value * 2);
            padding-left: $value;
            padding-right: $value;
          }

          @else {
            @include ln-respond-to('min-#{$key}') {
              max-width: ($ln-site-wrap-large-max-width + $value * 2);
              padding-left: $value;
              padding-right: $value;
            }
          }
        }
        /* stylelint-enable max-nesting-depth */
      }
    }
  }

  /* Squash */
  .ln-o-site-wrap--squash {
    max-width: $ln-site-wrap-squeeze-max-width;

    @each $key, $breakpoints in $ln-site-wrap-padding-variants {
      $suffix: '';

      @if ($key != 'def') { $suffix: '-#{$key}'; }

      &.ln-o-site-wrap--padding#{$suffix} {
        /* stylelint-disable max-nesting-depth */
        @each $key, $value in $breakpoints {
          @if ($key == 'def') {
            max-width: ($ln-site-wrap-squeeze-max-width + $value * 2);
            padding-left: $value;
            padding-right: $value;
          }

          @else {
            @include ln-respond-to('min-#{$key}') {
              max-width: ($ln-site-wrap-squeeze-max-width + $value * 2);
              padding-left: $value;
              padding-right: $value;
            }
          }
        }
        /* stylelint-enable max-nesting-depth */
      }
    }
  }
}
